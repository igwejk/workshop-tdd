import re
from playwright.sync_api import Page, expect
from inspect import cleandoc
from subprocess import CalledProcessError, CompletedProcess, run
from pathlib import Path
import pytest


def sh(script: str, directory: str = "./") -> CompletedProcess:
    """
    Executes a shell script in a given working directory.

    Args:
        script (str): The shell script to be executed.
        directory (str, optional): Working directory. Defaults to "./".

    Returns:
        CompletedProcess: The result of the shell command execution.

    Raises:
        CalledProcessError: If the shell command returns a non-zero exit status.

    """
    script_exec_trace_enabled = f"""
    set -eux
    {script}
    """
    return run(
        cleandoc(script_exec_trace_enabled),
        cwd=directory,
        shell=True,
        check=True,
        capture_output=True,
    )


@pytest.fixture(autouse=True, scope="module")
def mkdocs_config_file():
    return str(Path(__file__).parent.parent / "mkdocs.yml")


@pytest.fixture(autouse=True, scope="module")
def server_address():
    return "127.0.0.1:9898"


@pytest.fixture(autouse=True, scope="module")
def site_url(server_address):
    return f"http://{server_address}/workshop-tdd"


@pytest.fixture(autouse=True, scope="module")
def serve_site(server_address, mkdocs_config_file):
    """
    Serves the site using mkdocs.

    This function starts a local server to serve the site generated by mkdocs.
    It uses the mkdocs.yml configuration file located in the root of this project.
    The server runs on the address '127.0.0.1:9898' and does not enable live reloading.
    The site is served in strict mode and the server process runs in the background.

    Yields:
        bool: True
    """

    mkdocs_serve_script = f"""\
    python -m mkdocs serve                  \
        --dev-addr {server_address}         \
        --no-livereload                     \
        --clean                             \
        --config-file {mkdocs_config_file}  \
        --strict &
    """
    sh(mkdocs_serve_script)

    yield True

    print("The server will exit with the test process.")


# def test_site_build(mkdocs_config_file):
#     """
#     Test case for building the site using mkdocs.

#     This function builds the site using the mkdocs command-line tool.
#     It reads the mkdocs configuration file located at the root of the project.
#     If the build process fails, the test case fails.

#     Raises:
#         CalledProcessError: If the build process fails.

#     """

#     try:
#         sh(f"python -m mkdocs build -f {mkdocs_config_file} --clean --strict --verbose")
#     except CalledProcessError:
#         pytest.fail("Building the site failed.")


# def test_common_site_features(page: Page, site_url):

#     page.goto(site_url)

#     expect(page).to_have_title(re.compile(r"Workshop: Test Driven Development"))
#     expect(page.get_by_label("Tabs").get_by_role("link", name="Home")).to_be_visible()
#     expect(
#         page.get_by_label("Tabs").get_by_role("link", name="Exercises")
#     ).to_be_visible()
#     expect(
#         page.get_by_label("Tabs").get_by_role("link", name="Tetris Game")
#     ).to_be_visible()


def test_tab_home(page: Page, site_url):
    page.goto(site_url)

    expect(page).to_have_title(re.compile(r"Workshop: Test Driven Development"))


def test_tab_exercises(page: Page, site_url):
    page.goto(site_url)
    page.get_by_role("link", name="Exercises", exact=True).click()

    expect(page).to_have_title(
        re.compile(r"Exercises - Workshop: Test Driven Development")
    )
    expect(page.get_by_role("heading", name="✍️ Exercises")).to_be_visible()


def test_tab_tetris_game(page: Page, site_url):
    page.goto(site_url)
    page.get_by_role("link", name="Tetris Game", exact=True).click()

    expect(page).to_have_title(re.compile(r"Tetris"))
    expect(page.get_by_role("link", name="Press Space to Play.")).to_be_visible()
    expect(page.get_by_role("link", name="<< Home")).to_be_visible()

    page.get_by_role("link", name="<< Home").click()
